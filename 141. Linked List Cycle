/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        // HashSet<ListNode> isVisited = new HashSet<ListNode>();
        // while(head != null){
        //     //System.out.println(head);
        //     if(isVisited.contains(head)){
        //         return true;
        //     }
        //     isVisited.add(head);
        //     head = head.next;
        // }
        // return false;
        
        
        
        HashSet<ListNode> visited = new HashSet<ListNode>();
        while(head != null){
            if(visited.contains(head)){
                return true;
            }
            visited.add(head);
            head = head.next;
        }
        return false;
    }
}
